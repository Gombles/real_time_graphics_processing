#pragma once
/// \file
/// An example header file with comments designed to generate doxygen
/// documentation.

/*
* This simple project demonstrates a bit of the usage of doxygen to generate
* html documentation from your source code.
* 
* First, note there's a /// \file comment at the top of this file.
* This tells Doxygen to process this and generate documentation for it.
* 
* Regular comments (like this one!) starting with // or /* won't be processed by
* doxygen.
* 
* The first two functions makeCuboidVerts() and makeCuboidIndices() here
* have C#-style xml comments. These are handy as with Visual Studio you can type
* "///" above the function and it will start off the comment for you.
* 
* The third function roundToInt() has a doxygen-style comment, starting with /*!
* you can use either style (or both, but I'd stick to one style for consistency).
* 
* Note that the first two functions refer to one another using <see> - this will
* generate hyperlinks between them in the documentation.
* 
* Building the "doxygen" project will generate HTML documentation in build/html
* (and running build all with CTRL-SHIFT-B will generate the docs as well as 
* compiling the project).
* 
* Once you've generated the documentation from these existing comments try adding
* your own comment documenting the fibonacci() function.
*/

#include <vector>
#include <Eigen/Dense>
#include <GL/glew.h>

/// <summary>
/// Generate vertices of an axis-aligned cuboid, centred around the origin [0,0,0].
/// Vertices can be used together with the indices created by 
/// <see cref="makeCuboidIndices()"/>.
/// </summary>
/// <param name="sizeX">Size of the cuboid along the x axis</param>
/// <param name="sizeY">Size of the cuboid along the y axis</param>
/// <param name="sizeZ">Size of the cuboid along the z axis</param>
/// <returns>A std::vector of Eigen::Vector3f points</returns>
std::vector<Eigen::Vector3f> makeCuboidVerts(float sizeX = 1.f, float sizeY = 1.f, float sizeZ = 1.f);

/// <summary>
/// Function to generate indices for a cuboid, for example one generated by 
/// <see cref="makeCuboidVerts()"/>. These indices should function correctly with
/// default OpenGL culling settings.
/// </summary>
/// <returns>A std::vector of GLuint indices</returns>
std::vector<GLuint> makeCuboidIndices();

/*!
 * Rounds a floating-point number, and casts it to an integer.
 * \param x A floating-point number
 * \returns x rounded to the nearest integer, cast to int format.
*/
int roundToInt(float x);

int fibonacci(int x);

